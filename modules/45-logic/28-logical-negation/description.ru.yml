---

name: Отрицание
theory: |

  Наряду с конъюнкцией (**И**) и дизъюнкцией (**ИЛИ**), часто используется операция «**отрицание**». Отрицание меняет логическое значение на противоположное.

  В программировании ему соответствует унарный оператор `!`.

  Если есть функция, проверяющая чётность числа, то с помощью отрицания можно выполнить проверку нечётности:

  ```java
  public static void main(String[] args) {
    isEven(10);  // => true
    !isEven(10); // => false
  }
  static boolean isEven(int number) {
    return number % 2 == 0;
  }
  ```

  То есть мы просто добавили `!` слева от вызова функции и получили обратное действие.

  Отрицание — мощный инструмент, который позволяет лаконично выражать задуманные правила в коде без необходимости писать новые функции.

instructions: |

  Реализуйте функцию `App.isNotLannisterSoldier`, которая проверяет, что солдат — не Ланнистер. Функция принимает на вход такие же аргументы, как и функция `isLannisterSoldier`:

  1. Цвет доспехов (строка). Если доспехи красные, то строка `red`.
  2. `null` если щита нет. Строка `lion` если щит есть, и на нём изображен лев.

  Вам доступна уже готовая к использованию функция `Functions.isLannisterSoldier`. Можете воспользоваться ей, чтобы не писать все логические условия заново.

# tips:
#   - |
#     [Законы Де Моргана](https://ru.wikipedia.org/wiki/Законы_де_Моргана)
